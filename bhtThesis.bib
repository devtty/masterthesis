%%
@book{albach.GdE1,
	author={Manfred Albach},
	title={{Grundlagen der Elektrotechnik 1}},
	publisher={Pearson Studium},
	year={2005}
}

@book{albach.GdE2,
	author={Manfred Albach},
	title={{Grundlagen der Elektrotechnik 2}},
	publisher={Pearson Studium},
	year={2005}
}
 

@book{werner.SuS, 
	author={Martin Werner}, 
	title={{Signale und Systeme}}, 
	abstract={Das   Buch  Signale   und   Systeme  tr{\"a}gt   den
                  Entwicklungen in der modernen Informationstechnik
  		  Rechnung,  indem es  die  klassischen Methoden  straff
                  behandelt und der digitalen Signalverarbeitung und den
                  Anwendungen    der Wahrscheinlichkeitsrechnung der
                  Informationstechnik breiteren Raum gibt.}, 
	publisher={Vieweg Verlag}, 
	year={2002}, 
	edition={2.}, 
	note={{ISBN 978-3-528-13929-2}} 
} 

@misc{bibTeX.manual,
        author={Oren Patashnik},
        title={{Bib\TeX ing}},
        year={1988},
        note={{\newline\texttt{http://amath.colorado.edu/documentation/LaTeX/reference/faq/bibtex.pdf}}}
}

@misc{latex.symbols,
author={Scott Pakin},
title={{The Comprehensive \LaTeX\ Symbol List}},
year = 2009,
note={{\newline\texttt{http://www.ctan.org/tex-archive/info/symbols/comprehensive/symbols-a4.pdf}}}
}

@thesis{Giménez2015,
   author = {Carmen Torrano Giménez},
   keywords = {IDS,Intrusion detection systems,Machine learning,WAF,Web Application Firewalls},
   title = {Study of Stochastic and Machine Learning Techniques for Anomaly-based Web Attack Detection},
   year = 2015
}

@thesis{Appelt2016,
   author = {Dennis Appelt},
   title = {Automated security testing of web-based systems against SQL injection attacks},
   year = 2016
}

@inproceedings{Appelt2017,
   abstract = {Testing and fixing Web Application Firewalls (WAFs) are two relevant and complementary challenges for security analysts. Automated testing helps to cost-effectively detect vulnerabilities in a WAF by generating effective test cases, i.e., attacks. Once vulnerabilities have been identified, the WAF needs to be fixed by augmenting its rule set to filter attacks without blocking legitimate requests. However, existing research suggests that rule sets are very difficult to understand and too complex to be manually fixed. In this paper, we formalise the problem of fixing vulnerable WAFs as a combinatorial optimisation problem. To solve it, we propose an automated approach that combines machine learning with multi-objective genetic algorithms. Given a set of legitimate requests and bypassing SQL injection attacks, our approach automatically infers regular expressions that, when added to the WAF2019;s rule set, prevent many attacks while letting legitimate requests go through. Our empirical evaluation based on both open-source and proprietary WAFs shows that the generated filter rules are effective at blocking previously identified and successful SQL injection attacks (recall between 54.6% and 98.3%), while triggering in most cases no or few false positives (false positive rate between 0% and 2%).},
   author = {Dennis Appelt and Annibale Panichella and Lionel Briand},
   doi = {10.1109/ISSRE.2017.28},
   isbn = {9781538609415},
   issn = {10719458},
   journal = {Proceedings - International Symposium on Software Reliability Engineering, ISSRE},
   keywords = {Regular Expression Inference,Web Application Firewalls,Web Security},
   month = {11},
   pages = {339-350},
   publisher = {IEEE Computer Society},
   title = {Automatically Repairing Web Application Firewalls Based on Successful SQL Injection Attacks},
   volume = {2017-October},
   year = {2017},
}

@inproceedings{Appelt2014,
   abstract = {This paper examines the effects and potential benefits of utilising Web Application Firewalls (WAFs) and database proxies in SQL injection testing of web applications and services. We propose testing the WAF itself to refine and evaluate its security rules and prioritise fixing vulnerabilities that are not protected by the WAF. We also propose using database proxies as oracles for black-box security testing instead of relying only on the output of the application under test. The paper also presents a case study of our proposed approaches on two sets of web services. The results indicate that testing through WAFs can be used to prioritise vulnerabilities and that an oracle that uses a database proxy finds more vulnerabilities with fewer tries than an oracle that relies only on the output of the application. © Springer International Publishing Switzerland 2014.},
   author = {Dennis Appelt and Nadia Alshahwan and Lionel Briand},
   doi = {10.1007/978-3-319-07785-7_2},
   isbn = {9783319077840},
   issn = {16113349},
   journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
   keywords = {Blackbox testing,SQL injections,Web services},
   pages = {32-47},
   publisher = {Springer Verlag},
   title = {Assessing the impact of firewalls and database proxies on SQL injection testing},
   volume = {8432 LNCS},
   year = {2014},
}

@article{Appelt2018,
   abstract = {Web application firewalls (WAFs) are an essential protection mechanism for online software systems. Because of the relentless flow of new kinds of attacks as well as their increased sophistication, WAFs have to be updated and tested regularly to prevent attackers from easily circumventing them. In this paper, we focus on testing WAFs for SQL injection attacks, but the general principles and strategy we propose can be adapted to other contexts. We present ML-Driven, an approach based on machine learning and an evolutionary algorithm to automatically detect holes in WAFs that let SQL injection attacks bypass them. Initially, ML-Driven automatically generates a diverse set of attacks and submits them to the system being protected by the target WAF. Then, ML-Driven selects attacks that exhibit patterns (substrings) associated with bypassing the WAF and evolves them to generate new successful bypassing attacks. Machine learning is used to incrementally learn attack patterns from previously generated attacks according to their testing results, i.e., if they are blocked or bypass the WAF. We implemented ML-Driven in a tool and evaluated it on ModSecurity, a widely used open-source WAF, and a proprietary WAF protecting a financial institution. Our empirical results indicate that ML-Driven is effective and efficient at generating SQL injection attacks bypassing WAFs and identifying attack patterns.},
   author = {Dennis Appelt and Cu D. Nguyen and Annibale Panichella and Lionel C. Briand},
   doi = {10.1109/TR.2018.2805763},
   issn = {00189529},
   issue = {3},
   journal = {IEEE Transactions on Reliability},
   keywords = {SQL injection (SQLi),Software security testing,web application firewall (WAF)},
   month = {9},
   pages = {733-757},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {A Machine-Learning-Driven Evolutionary Approach for Testing Web Application Firewalls},
   volume = {67},
   year = {2018},
}



@article{Manaseer2018,
   abstract = {In this paper we propose a centralized web firewall system for web application security which will provide a new type of synchronized system, which has the ability to&nbsp; detect&nbsp; and prevent a variety of web application attacks for a wide range of hosts at the same time , using an centralized command and control system, the attacked client then sends the information to a centralized command and control server which will distribute the attack information to all of the integrated clients connected to it. The distributed information contains all of the attack information including the type of attack, the IP address of the attacker, and the time of attack. The process of receiving the attacker&#39;s information and distributing it through the centralized web firewall is done automatically and immediately at the time of the attack. And all of the receiving clients will take actions against the threat depending on the distributed information such as banning the IP address of the attacker. The main process aims to protect multiple clients from any possible attack from the same attacker or the same type of attack. The system has been implemented to protect a real web application. Experiments showed that the attacks has been successfully prevented on multiple hosts at the time.  This paper came to provide a centralized web firewall system that connect different web firewalls in order to detect and prevent different types of web attacks and work as a fully integrated system with the different clients.},
   author = {Saher Manaseer and Ahmad K. Al Hwaitat},
   doi = {10.5539/mas.v12n10p164},
   issn = {1913-1844},
   issue = {10},
   journal = {Modern Applied Science},
   month = {9},
   pages = {164},
   publisher = {Canadian Center of Science and Education},
   title = {Centralized Web Application Firewall Security System},
   volume = {12},
   year = {2018},
}

@inproceedings{kozik2019,
   abstract = {Currently, we can observe that vulnerable web pages are a common element in many high-profile cyberattacks. On the other hand, web applications (as well as web services) have become an inherent element of many supply chains. In order to protect the web services against some of the cyberattacks, one can adapt web application firewalls (WAF) solutions. However, quite often a challenge for typical WAF software is the fact that HTTP can be used as transport by other protocols or as a mix of other various encoding techniques. Therefore, in this paper, we propose a flexible schema for automated application layer request structure identification. Our experiments show that this technique allows us to further improve the effectiveness of known detection methods used in this research domain. In this paper, we show the possible practical application of the proposed cybersecurity solution in the public domain, namely public administration web-based systems and healthcare sectors. From the scientific point of view, we presented the results of various classifiers and pattern extraction techniques. We have also addressed the possible deployment of the proposed solution in Big Data-enabled environments.},
   author = {Rafal Kozik and Michal Choras},
   doi = {10.1093/jigpal/jzy029},
   issn = {13689894},
   issue = {2},
   journal = {Logic Journal of the IGPL},
   keywords = {Cyberattacks detection,anomaly detection,application layer,cybersecurity},
   month = {3},
   pages = {149-159},
   publisher = {Oxford University Press},
   title = {Protecting the application layer in the public domain with machine learning methods},
   volume = {27},
   year = {2019},
}

@inproceedings{Krueger2010,
   abstract = {The growing amount of web-based attacks poses a severe threat to the security of web applications. Signature-based detection techniques increasingly fail to cope with the variety and complexity of novel attack instances. As a remedy, we introduce a protocol-aware reverse HTTP proxy TokDoc (the token doctor), which intercepts requests and decides on a per-token basis whether a token requires automatic "healing". In particular, we propose an intelligent mangling technique, which, based on the decision of previously trained anomaly detectors, replaces suspicious parts in requests by benign data the system has seen in the past. Evaluation of our system in terms of accuracy is performed on two real-world data sets and a large variety of recent attacks. In comparison to state-of-the-art anomaly detectors, TokDoc is not only capable of detecting most attacks, but also significantly outperforms the other methods in terms of false positives. Runtime measurements show that our implementation can be deployed as an inline intrusion prevention system. © 2010 ACM.},
   author = {Tammo Krueger and Christian Gehl and Konrad Rieck and Pavel Laskov},
   city = {New York, NY, USA},
   doi = {10.1145/1774088.1774480},
   isbn = {9781605586397},
   journal = {Proceedings of the 2010 ACM Symposium on Applied Computing},
   keywords = {anomaly detection,firewall,intrusion prevention,web application},
   month = {3},
   pages = {1846-1853},
   publisher = {ACM},
   title = {TokDoc},
   url = {https://dl.acm.org/doi/10.1145/1774088.1774480},
   year = {2010},
}

@misc{owasptopten,
author = {OWASP Top 10 Team},
title = {OWASP Top 10 - 2021},
year = 2021,
url = {https://owasp.org/Top10/},
urldate ={2023-04-20}
}

@misc{wpowasp,
  author = {OWASP},
  title = {{Open Web Application Security Project}},
  year = {2022}, 
  note={{\newline\texttt{https://de.wikipedia.org/wiki/Open\_Web\_Application\_Security\_Project}\newline[Online; accessed 22-November-2022]}}
}

@misc{owasp10,
  author = {OWASP},
  title = {{OWASP Top 10}},
  year = {2021}, 
  note={{\newline\texttt{https://owasp.org/Top10/}\newline[Online; accessed 22-November-2022]}}
}

@misc{owaspapi10,
  author = {OWASP},
  title = {{OWASP Top 10 for API Security}},
  year = {2019},
  note={{\newline\texttt{https://raw.githubusercontent.com/OWASP/API-Security/master/2019/en/dist/owasp-api-security-top-10.pdf}\newline[Online; accessed 23-November-2022]}}
}

@misc{owaspgoat,
  author = {OWASP},
  title = {{OWASP Projekt WebGoat}},
  year = {2022},
  note={{\newline\texttt{https://owasp.org/www-project-weboat}\newline[Online; accessed 28-November-2022]}}
}

@misc{owaspcrs,
  author = {OWASP},
  title = {{OWASP Projekt CoreRuleSet}},
  year = {2022},
  note={{\newline\texttt{https://coreruleset.org/docs/}\newline[Online; accessed 08-Juni-2023]}}
}

@thesis{karakannas2014,
   author = {Andreas Karakannas and George Thessalonikefs},
   title = {Web Application Firewalls Evaluation and Analysis},
   type = {mathesis},
   institution = {University of Amsterdam},
   year = 2014
}

@inproceedings{applebaum2021,
   abstract = {Web Application Firewalls (WAF) have evolved to protect web applications from attack. A signature-based WAF responds to threats through the implementation of application-specific rules which block malicious traffic. However, these rules must be continually adapted to address evolving threats. The resultant rules can become complex and difficult to maintain, requiring that the administrator possesses a high-level of skills and detailed knowledge of the application. Not to mention the challenges of zero-day attacks! A WAF can deliver high rates of false positives and false negatives that can adversely impact the performance and can provide poor protection against zero-day attacks. This paper aims to provide a short review showing the development of WAFs based on machine-learning-based methods. It discusses their merits and limitations as well as identifying open issues. It assesses which of them can provide countermeasures to zero-day attacks and are easy to configure and maintain to keep them up to date. It was found that machine-learning-based methods have advantages over signature/rule-based methods as the former can address the vulnerability to zero-day attacks and can be easier to configure and keep up to date. The survey also determined that the effectiveness of machine-learning-based WAFs in protecting current attack patterns targeting web application frameworks is still an open area for further investigation.},
   author = {Simon Applebaum and Tarek Gaber and Ali Ahmed},
   doi = {10.1016/j.procs.2021.05.105},
   issn = {22128271},
   journal = {Procedia CIRP},
   keywords = {Machine learning,ModSecurity,OWASP,SRF,WAF,Web Application Firewalls,XSS,Zero-day attacks,signature-based WAF},
   note = {Essentzielle Beschreibung der Evolution von WAF von regelbasiert zu ML zu Hybrid},
   pages = {359-367},
   publisher = {Elsevier B.V.},
   title = {Signature-based and Machine-Learning-based Web Application Firewalls: A Short Survey},
   volume = {189},
   year = {2021}
}


@misc{csic2010,
   author = {C. Torrano Giménez and A. Pérez Villegas and G. Álvarez Maranón},
   title = {HTTP DATASET CSIC 2010},
   year = {2010},
   note={{\newline\texttt{https://www.tic.itefi.csic.es/dataset/}\newline[Online; accessed 12-Juni-2023]}}
}

@misc{csiccsv2010,
   author = {Peter Scully},
   title = {CSIC 2010 HTTP Dataset in CSV Format(for Weka Analysis)},
   year = {2019},
   note={{\newline\texttt{https://petescully.co.uk/research/csic-2010-http-dataset-in-csv-format-for-weka-analysis/}\newline[Online; accessed 20-Juni-2023]}}
}